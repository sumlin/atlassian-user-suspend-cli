#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Atlassian API
"""

import os
import sys
import requests
from dotenv import load_dotenv

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table

    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False


def test_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    console = Console() if RICH_AVAILABLE else None

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    load_dotenv()
    org_id = os.getenv("ORG_ID")
    api_key = os.getenv("API_KEY")

    print("üîç Atlassian API Connection Test\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not org_id or not api_key:
        error_msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ORG_ID –∏–ª–∏ API_KEY"
        if console:
            console.print(Panel(error_msg, style="red"))
        else:
            print(error_msg)
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("ORG_ID=your-organization-id")
        print("API_KEY=your-api-key")
        return False

    print(f"üìã Organization ID: {org_id}")
    print(f"üîë API Key: {'*' * 10}{api_key[-4:]}\n")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    tests = [
        {
            "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "url": f"https://api.atlassian.com/admin/v2/orgs/{org_id}/directories",
            "params": {},
            "check_permission": True
        },
        {
            "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
            "url": f"https://api.atlassian.com/admin/v1/orgs/{org_id}/users",
            "params": {"limit": 1},
            "check_permission": False
        }
    ]

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Accept": "application/json"
    }

    all_passed = True

    for test in tests:
        print(f"üß™ {test['name']}...")

        try:
            response = requests.get(
                test["url"],
                headers=headers,
                params=test["params"],
                timeout=10
            )

            if response.status_code == 200:
                success_msg = "   ‚úÖ –£—Å–ø–µ—à–Ω–æ"
                if console:
                    console.print(success_msg, style="green")
                else:
                    print(success_msg)

                if test["check_permission"]:
                    data = response.json()
                    if "directories" in test["url"]:
                        # –î–ª—è /directories –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
                        directories_data = data.get("data", [])
                        dir_count = len(directories_data)
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {dir_count}")
                        
                        if directories_data and RICH_AVAILABLE and console:
                            directory = directories_data[0]
                            table = Table(title="–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", show_header=True)
                            table.add_column("–ü–æ–ª–µ", style="cyan")
                            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")

                            table.add_row("ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", directory.get("directoryId", "N/A"))
                            table.add_row("–ù–∞–∑–≤–∞–Ω–∏–µ", directory.get("name", "N/A"))

                            console.print(table)
                    else:
                        # –î–ª—è /users –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                        users_data = data.get("data", [])
                        user_count = len(users_data)
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if users_data and RICH_AVAILABLE and console:
                            user = users_data[0]
                            table = Table(title="–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_header=True)
                            table.add_column("–ü–æ–ª–µ", style="cyan")
                            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")

                            table.add_row("Email", user.get("email", "N/A"))
                            table.add_row("Account ID", user.get("account_id", "N/A"))
                            table.add_row("–ò–º—è", user.get("name", "N/A"))
                            table.add_row("–°—Ç–∞—Ç—É—Å", user.get("account_status", "N/A"))
                            table.add_row("–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π", str(user.get("access_billable", False)))

                            products = user.get("product_access", [])
                            if products:
                                product_names = [p.get("name", p.get("key", "?")) for p in products]
                                table.add_row("–ü—Ä–æ–¥—É–∫—Ç—ã", ", ".join(product_names))

                            console.print(table)

            elif response.status_code == 401:
                error_msg = "   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
                if console:
                    console.print(error_msg, style="red")
                else:
                    print(error_msg)
                all_passed = False

            elif response.status_code == 403:
                error_msg = "   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ Organization Admin"
                if console:
                    console.print(error_msg, style="red")
                else:
                    print(error_msg)
                all_passed = False

            elif response.status_code == 404:
                error_msg = f"   ‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å ID '{org_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                if console:
                    console.print(error_msg, style="red")
                else:
                    print(error_msg)
                all_passed = False

            else:
                error_msg = f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: HTTP {response.status_code}"
                if console:
                    console.print(error_msg, style="yellow")
                else:
                    print(error_msg)
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")

        except requests.RequestException as e:
            error_msg = f"   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"
            if console:
                console.print(error_msg, style="red")
            else:
                print(error_msg)
            all_passed = False

        print()

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if all_passed:
        success_msg = "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        if console:
            console.print(Panel(success_msg, style="green", title="–†–µ–∑—É–ª—å—Ç–∞—Ç"))
        else:
            print("\n" + "=" * 50)
            print(success_msg)
            print("=" * 50)
    else:
        error_msg = "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        if console:
            console.print(Panel(error_msg, style="red", title="–†–µ–∑—É–ª—å—Ç–∞—Ç"))
        else:
            print("\n" + "=" * 50)
            print(error_msg)
            print("=" * 50)

        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –ë–ï–ó scope")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ Organization Admin")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Organization ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–æ–º–µ–Ω –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

    return all_passed


if __name__ == "__main__":
    success = test_connection()
    sys.exit(0 if success else 1)